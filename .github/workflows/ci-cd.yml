name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests d'Intégration
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bank_test
          MYSQL_USER: bank_user
          MYSQL_PASSWORD: bank_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: � Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, pdo, sqlite3
        tools: composer:v2
        coverage: none
        
    - name: ⚙️ Setup environment
      working-directory: ./bank-backend
      run: |
        cp .env.test .env
        # Wait for MySQL to be ready
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done
        echo 'MySQL is ready!'
        
    - name: 📦 Install Composer dependencies
      working-directory: ./bank-backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-scripts
        
    - name: 🗄️ Create database and run migrations
      working-directory: ./bank-backend
      run: |
        php bin/console doctrine:database:create --env=test --if-not-exists
        php bin/console doctrine:migrations:migrate --env=test --no-interaction
        php bin/console doctrine:fixtures:load --env=test --no-interaction
        
    - name: 🔄 Run Composer auto-scripts
      working-directory: ./bank-backend
      run: composer run-script auto-scripts
        
    - name: 🧪 Run Symfony tests
      working-directory: ./bank-backend
      run: |
        php bin/phpunit --testdox
        
    - name: 🔧 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './bank-frontend/package-lock.json'
        
    - name: 📦 Install frontend dependencies
      working-directory: ./bank-frontend
      run: npm ci
        
    - name: 🧪 Run frontend tests
      working-directory: ./bank-frontend
      run: npm run test
        
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          bank-backend/var/log/
          bank-frontend/coverage/
        
  build:
    needs: test
    runs-on: ubuntu-latest
    name: 🏗️ Build & Push Images
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏗️ Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./bank-backend
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/bank-backend:latest
          ${{ env.DOCKER_REGISTRY }}/bank-backend:${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./bank-frontend
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/bank-frontend:latest
          ${{ env.DOCKER_REGISTRY }}/bank-frontend:${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/bank-app
          
          # Pull latest images
          docker pull ${{ env.DOCKER_REGISTRY }}/bank-backend:${{ env.IMAGE_TAG }}
          docker pull ${{ env.DOCKER_REGISTRY }}/bank-frontend:${{ env.IMAGE_TAG }}
          
          # Update docker-compose with new images
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          
          # Rolling update with zero downtime
          docker-compose -f docker-compose.prod.yml up -d --no-deps backend
          docker-compose -f docker-compose.prod.yml up -d --no-deps frontend
          
          # Health check
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:5173/ || exit 1
          
          # Cleanup old images
          docker image prune -f
          
          echo "✅ Deployment successful!"
