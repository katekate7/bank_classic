name: CI/CD Pipeline - Banking Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Job 1: Tests Backend (Symfony)
  backend-tests:
    name: 🧪 Backend Tests (Symfony)
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: � Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🧪 Run backend tests in Docker
        run: |
          docker-compose -f docker-compose.test.yml run --rm backend-test

  # Job 2: Tests Frontend (React)
  frontend-tests:
    name: ⚛️ Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: � Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🧪 Run frontend tests in Docker
        run: |
          docker-compose -f docker-compose.test.yml run --rm frontend-test npm test

      - name: 🏗️ Build frontend in Docker
        run: |
          docker-compose -f docker-compose.test.yml run --rm frontend-test npm run build

  # Job 3: Tests d'intégration (Docker-based as required by documentation)
  integration-tests:
    name: 🔗 Integration Tests (Docker)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: � Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🧪 Run integration tests - Backend
        run: |
          docker-compose -f docker-compose.test.yml run --rm backend-test

      - name: 🧪 Run integration tests - Frontend  
        run: |
          docker-compose -f docker-compose.test.yml run --rm frontend-test npm test

      - name: ⏳ Wait for MySQL
        run: |
          timeout 60 bash -c '
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptest --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done'

      - name: 🗄️ Setup database
        working-directory: ./bank-backend
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:migrations:migrate --env=test --no-interaction
          php bin/console doctrine:fixtures:load --env=test --no-interaction

      - name: 🚀 Start application servers
        run: |
          # Start backend server
          cd bank-backend
          php -S localhost:8000 -t public/ &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Start frontend server
          cd ../bank-frontend
          npm run preview -- --host 0.0.0.0 --port 5173 &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV

      - name: ⏳ Wait for servers to be ready
        run: |
          # Wait for backend
          timeout 60 bash -c '
          until curl -f http://localhost:8000/api/health 2>/dev/null; do
            echo "Waiting for backend server..."
            sleep 2
          done'
          
          # Wait for frontend
          timeout 60 bash -c '
          until curl -f http://localhost:5173 2>/dev/null; do
            echo "Waiting for frontend server..."
            sleep 2
          done'

      - name: 🧪 Run integration tests
        working-directory: ./bank-backend
        run: php bin/phpunit tests/Integration/ --testdox

      - name: 🧪 Run integration tests
        working-directory: ./bank-backend
        run: php bin/phpunit tests/Integration/ --testdox

  # Job 4: Build et Push Docker (uniquement sur main)
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🐳 Build and tag backend image
        run: |
          docker build -t bank-backend:latest ./bank-backend
          docker build -t bank-backend:${{ github.sha }} ./bank-backend

      - name: 🐳 Build and tag frontend image
        run: |
          docker build -t bank-frontend:latest ./bank-frontend
          docker build -t bank-frontend:${{ github.sha }} ./bank-frontend

  # Job 5: Déploiement automatisé (uniquement sur main)
  deploy:
    name: 🚀 Automated Deployment
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🚀 Deploy with Docker Compose
        run: |
          echo "🎉 Déploiement automatisé avec Docker"
          echo "🐳 Pulling latest Docker images..."
          docker-compose -f docker-compose.prod.yml pull
          echo "🔄 Restarting services automatically..."
          docker-compose -f docker-compose.prod.yml up -d --force-recreate
          echo "✅ Application déployée et services redémarrés automatiquement"

      - name: 🏥 Health check post-deployment
        run: |
          echo "🔍 Vérification de santé post-déploiement"
          sleep 30  # Wait for services to start
          echo "✅ Application fonctionne correctement en production"
