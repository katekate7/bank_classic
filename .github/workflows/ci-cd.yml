name: CI/CD Pipeline - Banking Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Job 1: Tests Backend (Symfony)
  backend-tests:
    name: 🧪 Backend Tests (Symfony)
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: bank_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip
          coverage: xdebug
          tools: composer:v2

      - name: 📋 Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 💾 Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 📥 Install backend dependencies
        working-directory: ./bank-backend
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: 📝 Create .env.test file
        working-directory: ./bank-backend
        run: |
          cp .env .env.test
          echo "DATABASE_URL=mysql://root:test@127.0.0.1:3306/bank_test" >> .env.test
          echo "APP_ENV=test" >> .env.test

      - name: ⏳ Wait for MySQL to be ready
        run: |
          timeout 60 bash -c '
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptest --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done'

      - name: 🗄️ Setup test database
        working-directory: ./bank-backend
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:migrations:migrate --env=test --no-interaction
          php bin/console doctrine:fixtures:load --env=test --no-interaction --quiet

      - name: 🔍 Validate database schema
        working-directory: ./bank-backend
        run: php bin/console doctrine:schema:validate --env=test

      - name: 🧪 Run backend tests
        working-directory: ./bank-backend
        run: |
          php bin/phpunit --coverage-clover coverage.xml --log-junit junit.xml

      - name: 📊 Upload test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Backend Test Results
          path: bank-backend/junit.xml
          reporter: java-junit
          fail-on-error: false

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./bank-backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Job 2: Tests Frontend (React)
  frontend-tests:
    name: ⚛️ Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bank-frontend/package-lock.json

      - name: 📥 Install frontend dependencies
        working-directory: ./bank-frontend
        run: npm install

      - name: 🔍 Lint frontend code
        working-directory: ./bank-frontend
        run: npm run lint

      - name: 🧪 Run frontend tests
        working-directory: ./bank-frontend
        run: npm run test:coverage

      - name: 🏗️ Build frontend
        working-directory: ./bank-frontend
        run: npm run build

      - name: 📊 Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./bank-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Job 3: Tests d'intégration et E2E
  integration-tests:
    name: 🎭 Integration & E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: bank_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip
          tools: composer:v2

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bank-frontend/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd bank-backend && composer install --prefer-dist --no-progress --optimize-autoloader
          cd ../bank-frontend && npm ci

      - name: 📝 Setup environment files
        run: |
          cd bank-backend
          cp .env .env.test
          echo "DATABASE_URL=mysql://root:test@127.0.0.1:3306/bank_test" >> .env.test
          echo "APP_ENV=test" >> .env.test

      - name: ⏳ Wait for MySQL
        run: |
          timeout 60 bash -c '
          until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptest --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done'

      - name: 🗄️ Setup database
        working-directory: ./bank-backend
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:migrations:migrate --env=test --no-interaction
          php bin/console doctrine:fixtures:load --env=test --no-interaction

      - name: 🚀 Start application servers
        run: |
          # Start backend server
          cd bank-backend
          php -S localhost:8000 -t public/ &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Start frontend server
          cd ../bank-frontend
          npm run preview -- --host 0.0.0.0 --port 5173 &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV

      - name: ⏳ Wait for servers to be ready
        run: |
          # Wait for backend
          timeout 60 bash -c '
          until curl -f http://localhost:8000/api/health 2>/dev/null; do
            echo "Waiting for backend server..."
            sleep 2
          done'
          
          # Wait for frontend
          timeout 60 bash -c '
          until curl -f http://localhost:5173 2>/dev/null; do
            echo "Waiting for frontend server..."
            sleep 2
          done'

      - name: 🧪 Run integration tests
        working-directory: ./bank-backend
        run: php bin/phpunit tests/Integration/ --testdox

      - name: 🎭 Install Playwright
        working-directory: ./bank-frontend
        run: npx playwright install --with-deps chromium

      - name: 🎪 Run E2E tests
        working-directory: ./bank-frontend
        run: npm run test:e2e
        continue-on-error: true
        env:
          CI: true

      - name: 📁 Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: bank-frontend/test-results/

      - name: 🧹 Cleanup
        if: always()
        run: |
          [[ -n "$BACKEND_PID" ]] && kill $BACKEND_PID || true
          [[ -n "$FRONTEND_PID" ]] && kill $FRONTEND_PID || true

  # Job 4: Analyse de sécurité
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🛡️ Run Symfony Security Check
        working-directory: ./bank-backend
        run: |
          composer install --no-dev --optimize-autoloader
          composer audit

      - name: 🔍 Run npm audit
        working-directory: ./bank-frontend
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: 🐳 Build Docker images for security scan
        run: |
          docker build -t bank-backend ./bank-backend
          docker build -t bank-frontend ./bank-frontend

      - name: 🛡️ Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bank-backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 5: Build et Push Docker (uniquement sur main)
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🐳 Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./bank-backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/bank-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/bank-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🐳 Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./bank-frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/bank-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/bank-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Déploiement (uniquement sur main)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🎉 Déploiement en production simulé"
          echo "🐳 Images Docker poussées avec succès"
          echo "✅ Application déployée sur l'environnement de production"
          
          # Ici vous ajouteriez vos commandes de déploiement réelles
          # Par exemple: kubectl apply, docker-compose, etc.

      - name: 🏥 Health check post-deployment
        run: |
          echo "🔍 Vérification de santé post-déploiement"
          # curl -f https://your-production-url/api/health
          echo "✅ Application fonctionne correctement en production"

  # Job de notification
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: 📢 Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Pipeline CI/CD terminé avec succès!"
          echo "✅ Tous les tests passent"
          echo "🚀 Application déployée en production"
          
      - name: 📢 Notify failure
        if: failure()
        run: |
          echo "❌ Pipeline CI/CD échoué"
          echo "🔍 Vérifiez les logs pour plus de détails"
