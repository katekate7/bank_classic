name: Complete CI/CD Pipeline - Bank Application

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Tests unitaires backend
  backend-unit-tests:
    name: 🧪 Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bank_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql
          coverage: xdebug

      - name: 📥 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: bank-backend/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: 🎼 Install Composer dependencies
        working-directory: bank-backend
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: 🗃️ Setup test database
        working-directory: bank-backend
        run: |
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: 🧪 Run PHPUnit unit tests
        working-directory: bank-backend
        run: |
          vendor/bin/phpunit --testsuite="Unit Tests" --coverage-clover=coverage.xml

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: bank-backend/coverage.xml
          flags: backend

  # Job 2: Tests d'intégration backend
  backend-integration-tests:
    name: 🔄 Backend Integration Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bank_integration_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql

      - name: 🎼 Install Composer dependencies
        working-directory: bank-backend
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: 🗃️ Setup integration test database
        working-directory: bank-backend
        run: |
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:migrations:migrate --no-interaction --env=test
          php bin/console doctrine:fixtures:load --no-interaction --env=test

      - name: 🔄 Run integration tests
        working-directory: bank-backend
        run: |
          vendor/bin/phpunit --testsuite="Integration Tests" --configuration phpunit.integration.xml

      - name: 🏗️ Run system tests
        working-directory: bank-backend
        run: |
          vendor/bin/phpunit --testsuite="System Tests" --configuration phpunit.integration.xml

      - name: ✅ Run acceptance tests
        working-directory: bank-backend
        run: |
          vendor/bin/phpunit --testsuite="Acceptance Tests" --configuration phpunit.integration.xml

  # Job 3: Tests unitaires frontend
  frontend-unit-tests:
    name: ⚛️ Frontend Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bank-frontend/package-lock.json

      - name: 📥 Install dependencies
        working-directory: bank-frontend
        run: npm ci

      - name: 🧪 Run unit tests with coverage
        working-directory: bank-frontend
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: bank-frontend/coverage/coverage-final.json
          flags: frontend

  # Job 4: Tests d'intégration frontend
  frontend-integration-tests:
    name: 🔄 Frontend Integration Tests
    runs-on: ubuntu-latest
    needs: frontend-unit-tests

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bank-frontend/package-lock.json

      - name: 📥 Install dependencies
        working-directory: bank-frontend
        run: npm ci

      - name: 🔄 Run integration tests
        working-directory: bank-frontend
        run: npm run test:integration

  # Job 5: Tests End-to-End
  e2e-tests:
    name: 🌐 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, frontend-integration-tests]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bank_e2e_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bank-frontend/package-lock.json

      - name: 🎼 Install backend dependencies
        working-directory: bank-backend
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: 📥 Install frontend dependencies
        working-directory: bank-frontend
        run: npm ci

      - name: 🗃️ Setup E2E database
        working-directory: bank-backend
        run: |
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:migrations:migrate --no-interaction --env=test
          php bin/console doctrine:fixtures:load --no-interaction --env=test

      - name: 🎭 Install Playwright
        working-directory: bank-frontend
        run: npx playwright install --with-deps

      - name: 🚀 Start backend server
        working-directory: bank-backend
        run: |
          php -S 127.0.0.1:8000 -t public &
          sleep 5

      - name: 🌐 Run E2E tests
        working-directory: bank-frontend
        run: npx playwright test

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: bank-frontend/playwright-report/
          retention-days: 30

  # Job 6: Tests de performance
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Build and start application with Docker
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/login
            http://localhost:3000/register
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 🧪 Run load tests with Artillery
        run: |
          npm install -g artillery
          artillery run tests/performance/load-test.yml

      - name: 🛑 Stop Docker containers
        run: docker compose -f docker-compose.test.yml down

  # Job 7: Tests de sécurité
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: performance-tests

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🐘 PHP Security Checker
        working-directory: bank-backend
        run: |
          curl -L https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64 -o security-checker
          chmod +x security-checker
          ./security-checker

      - name: 🟢 Node.js Security Audit
        working-directory: bank-frontend
        run: npm audit --audit-level high

  # Job 8: Quality Gates
  quality-gates:
    name: 🎯 Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, frontend-integration-tests, e2e-tests]

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📊 Check coverage thresholds
        run: |
          echo "Checking code coverage thresholds..."
          # This would check if coverage is above required thresholds
          # and fail if not met

  # Job 9: Build et déploiement (si tous les tests passent)
  build-and-deploy:
    name: 🚀 Build and Deploy
    runs-on: ubuntu-latest
    needs: [security-tests, quality-gates]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and push Docker images
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}/backend:latest \
            -t ghcr.io/${{ github.repository }}/backend:${{ github.sha }} \
            --push bank-backend/

          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}/frontend:latest \
            -t ghcr.io/${{ github.repository }}/frontend:${{ github.sha }} \
            --push bank-frontend/

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Here you would add your deployment commands
          # For example: kubectl apply -f k8s/ or docker compose -f docker-compose.prod.yml up -d

      - name: ✅ Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging..."
          # Quick tests to verify deployment is working

  # Job 10: Notification
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()

    steps:
      - name: 📢 Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          text: |
            CI/CD Pipeline completed for ${{ github.repository }}
            Branch: ${{ github.ref }}
            Status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
