version: '3.8'

services:
  frontend:
    image: ${DOCKER_REGISTRY:-docker.io}/bank-frontend:${IMAGE_TAG:-latest}
    ports:
      - "5173:5173"
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    image: ${DOCKER_REGISTRY:-docker.io}/bank-backend:${IMAGE_TAG:-latest}
    ports:
      - "8000:80"
    networks:
      - app-network
    depends_on:
      - db
    restart: unless-stopped
    environment:
      - APP_ENV=prod
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/mybank
    volumes:
      - backend_data:/var/www/html/var
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    networks:
      - app-network
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secureprodrootpassword}
      MYSQL_DATABASE: mybank
      MYSQL_USER: bankuser
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-securepassword}
    volumes:
      - db_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Service de monitoring optionnel
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 --cleanup
    restart: unless-stopped
    environment:
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${NOTIFICATION_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${NOTIFICATION_EMAIL}

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
    driver: local
  backend_data:
    driver: local
